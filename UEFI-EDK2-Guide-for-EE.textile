h2. UEFI/EDK2

EDK2 is a modern, feature-rich, cross-platform firmware development environment for the UEFI and PI specifications.

The reference UEFI/EDK2 tree used by the EE-RPB comes from Linaro, which is available at "https://git.linaro.org/uefi/linaro-edk2.git":https://git.linaro.org/uefi/linaro-edk2.git

The Linaro EDK2 tree is based on upstream (with constant rebases), covered by monthly validation and releases, in order to provide a more stable reference. This tree also contains two extra git submodules, LinaroPkg and OpenPlatformPkg, with the latter providing the hardware specific support and drivers (since EDK2 upstream only provides the common and generic pieces).

EDK2 is currently used by 96boards HuskyBoard, AMD Overdrive, ARM Juno r0/r1 and HiSilicon D02.

This guide provides enough information on how to build UEFI/EDK2 from scratch, but meant to be a quick guide. For further information please also check the official Linaro UEFI documentation, available at "https://wiki.linaro.org/ARM/UEFI":https://wiki.linaro.org/ARM/UEFI and  "https://wiki.linaro.org/LEG/Engineering/Kernel/UEFI/build":https://wiki.linaro.org/LEG/Engineering/Kernel/UEFI/build

h3. Building

h4. Pre-Requisites

Make sure the build dependencies are available at your host machine.

On Debian/Ubuntu:

bc. sudo apt-get install uuid-dev build-essential

On RHEL/CentOS/Fedora:

bc. sudo yum install uuid-devel libuuid-devel

If cross compiling, you also need to separately add the required toolchains. Ubuntu has a prebuilt arm-linux-gnueabihf toolchain, but not an aarch64-linux-gnu one.

Download Linaro's GCC 4.9 cross-toolchain for Aarch64, and make it available in your @PATH@. You can download and use the Linaro GCC binary (Linaro GCC 4.9-2015.02), available at "http://releases.linaro.org/15.02/components/toolchain/binaries/aarch64-linux-gnu/gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu.tar.xz":http://releases.linaro.org/15.02/components/toolchain/binaries/aarch64-linux-gnu/gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu.tar.xz

bc. mkdir arm-tc arm64-tc
tar --strip-components=1 -C ${PWD}/arm-tc -xf gcc-linaro-arm-linux-gnueabihf-4.9-*_linux.tar.xz
tar --strip-components=1 -C ${PWD}/arm64-tc -xf gcc-linaro-aarch64-linux-gnu-4.9-*_linux.tar.xz
export PATH="${PWD}/arm-tc/bin:${PWD}/arm64-tc/bin:$PATH"

h4. Getting the source code

UEFI/EDK2:

bc. git clone -b release http://git.linaro.org/git/uefi/linaro-edk2.git
cd linaro-edk2
git submodule init
git submodule update

ARM Trusted Firmware (in case it is supported by your target hardware):

bc. git clone https://github.com/ARM-software/arm-trusted-firmware.git
git checkout -b known_rev 53d069c28c2738c3a4f59211fbc61323ec28208c # suggested revision to avoid surprises

UEFI Tools (helpers and scripts to make the build process easy):

bc. git clone git://git.linaro.org/uefi/uefi-tools.git

h4. Building UEFI/EDK2 for Juno R0/R1

bc. export AARCH64_TOOLCHAIN=GCC49
export LINARO_EDK2_DIR=${PWD}/linaro-edk2
export UEFI_TOOLS_DIR=${PWD}/uefi-tools
export ARMTF_DIR=${PWD}/arm-trusted-firmware
cd ${LINARO_EDK2_DIR}
${UEFI_TOOLS_DIR}/uefi-build.sh -c LinaroPkg/platforms.config -b DEBUG -a $ARMTF_DIR juno

The output files:

* @Build/ArmJuno/DEBUG_GCC49/FV/bl1.bin@
* @Build/ArmJuno/DEBUG_GCC49/FV/fip.bin@

h4. Building UEFI/EDK2 for D02

TODO

h4. Building UEFI/EDK2 for Overdrive

TODO

h3. Flashing

h4. Juno R0/R1

h5. Clean flash

Power on the board, and (if prompted) press Enter to stop auto boot. Once in Juno's boot monitor, use the following commands to erase Juno's flash and export it as an external storage:

bc. Cmd> flash
Flash> eraseall
Flash> quit
Cmd> usb_on

This will delete any binaries and UEFI settings currently stored in the Juno's flash, then mount the Juno's MMC card as an external storage device on your host PC.

In order to do a clean flash on Juno, you will also need to flash the firmware provided by ARM, which can be downloaded from the Linaro ARM LT Versatile Express Firmware git tree:

bc. git clone -b juno-0.11.6-linaro1 --depth 1 https://git.linaro.org/arm/vexpress-firmware.git

Then copy over the UEFI/EDK2 files that were built in the previous steps, making sure they get copied to the right firmware folder location:

bc. cp $LINARO_EDK2_DIR/Build/ArmJuno/DEBUG_GCC49/FV/bl1.bin vexpress-firmware/SOFTWARE
cp $LINARO_EDK2_DIR/Build/ArmJuno/DEBUG_GCC49/FV/fip.bin vexpress-firmware/SOFTWARE

Now just copy all the files that are now available in the @vexpress-firmware@ folder into the mounted MMC card (which is provided as an external storage after calling @usb_on@):

bc. cp -rf vexpress-firmware/* /media/recovery

Be sure to issue a sync command on your host PC afterwards, which will guarantee that the copy has completed:

bc. sync

Finally, power cycle the Juno. After it has finished copying the contents of the MMC card into Flash, the board will boot up and run the new firmware.

h5. Upgrading UEFI/EDK2

If you already have a known working firmware available in your Juno, you simply need to update @bl1.bin@ and @fip.bin@, by mounting Juno's MMC over usb (as described in the procedure for clean flash).

Export Juno's MMC as a usb storage device on your host machine:

bc. Cmd> usb_on

Then just copy over the UEFI/EDK2 files that were built in the previous steps:

bc. cp $LINARO_EDK2_DIR/Build/ArmJuno/DEBUG_GCC49/FV/bl1.bin /media/recovery/SOFTWARE
cp $LINARO_EDK2_DIR/Build/ArmJuno/DEBUG_GCC49/FV/fip.bin /media/recovery/SOFTWARE

Be sure to issue a sync command on your host PC afterwards, which will guarantee that the copy has completed:

bc. sync

Finally, power cycle the Juno. After it has finished copying the contents of the MMC card into Flash, the board will boot up and run the new firmware.

h4. D02

h5. Clean flash

h4. Upgrading firmware

h2. Extras

h3. Setting boot mode to PXE

h3. Setting boot mode to TFTP

h3. Links and References:

* https://community.arm.com/docs/DOC-10804
* https://community.arm.com/docs/DOC-8396